/*
打印图形
 小明在X星球的城堡中发现了如下图形和文字：
rank=3
   * 
  * * 
 *   *  
* * * *

rank=5
               *                                                      
              * *                                                     
             *   *                                                    
            * * * *                                                   
           *       *                                                  
          * *     * *                                                 
         *   *   *   *                                                
        * * * * * * * *                                               
       *               *                                              
      * *             * *                                             
     *   *           *   *                                            
    * * * *         * * * *                                           
   *       *       *       *  
  * *     * *     * *     * *  
 *   *   *   *   *   *   *   * 
* * * * * * * * * * * * * * * *  


ran=6
                               *                                      
                              * *                                     
                             *   *                                    
                            * * * *                                   
                           *       *                                  
                          * *     * *                                 
                         *   *   *   *                                
                        * * * * * * * *                               
                       *               *                              
                      * *             * *                             
                     *   *           *   *                            
                    * * * *         * * * *                           
                   *       *       *       *                          
                  * *     * *     * *     * *                         
                 *   *   *   *   *   *   *   *                        
                * * * * * * * * * * * * * * * *                       
               *                               *                      
              * *                             * *                     
             *   *                           *   *                    
            * * * *                         * * * *                   
           *       *                       *       *                  
          * *     * *                     * *     * *                 
         *   *   *   *                   *   *   *   *                
        * * * * * * * *                 * * * * * * * *               
       *               *               *               *              
      * *             * *             * *             * *             
     *   *           *   *           *   *           *   *            
    * * * *         * * * *         * * * *         * * * *           
   *       *       *       *       *       *       *       *          
  * *     * *     * *     * *     * *     * *     * *     * *         
 *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *        
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
算法思想：
  图像比较复杂，无法一行一行输出。可以用二维数组作为像素表，1输出*，
0输出空格。rank大于1时，图像由3个图像rank-1构成。
rank=1		*			pixel[0][0] = 1

rank=2		*			由rank(1)组成，	pixel[0][pow(2,1)] = 1
		   * *							pixel[pow(2,0)][0] = 1
										pixel[pow(2,0)][pow(2,1)] = 1

rank=3		*			由rank(2)组成,	pixel[0][pow(2,2)]开始，同rank(2)
		   * *							pixel[pow(2,1)][0]开始，同rank(2)
		  *   *							pixel[pow(2,1)][pow(2,2]开始，同上
		 * * * *
						…………
	可以用递归来实现
*/////////////////////////////////////////////////////////////////
#include<stdio.h>
#define High 65
#define Width High*2

int pixel[High][Width] = {0};	//像素表，1代表*，0代表空格

int pow(int m,int n)
{	///求整数幂函数
	int f;
	if( n==0 )
		f = 1;
	else if( n==1 )
		f = m;
	else
	{
		f = m * pow(m,n-1);
	}
	return f;
}

int dispose(int rank,int x,int y)
{	//像素值的处理
	if( rank==1 )		//递归出口，元素赋值
		pixel[x][y] = 1;
	else
	{
		dispose(rank-1,x,y+pow(2,rank-2));				//处理上部分
		dispose(rank-1,x+pow(2,rank-2),y);				//处理左下
		dispose(rank-1,x+pow(2,rank-2),y+pow(2,rank-1));	//处理右下
	}
	return 0;
}

int show()
{	//输出函数
	int i,j;
	for( i=0;i<High;i++ )
	{
		for( j=0;j<Width;j++ )
		{
			if( pixel[i][j]==0 )
				printf(" ");	//元素值为0，输出空格
			else				
				printf("*");	//否则值为1，输出*
		}
		printf("\n");
	}
	return 0;
}



int main()
{
	int rank;
	printf("设置rank的值(1<=rank<=7):");
	scanf("%d",&rank);
	dispose(rank,0,0);	//显示元素的处理
	show();				//显示结果
	return 0;
}